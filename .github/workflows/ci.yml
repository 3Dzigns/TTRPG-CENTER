# CI Pipeline for TTRPG Center
# Runs on PR and push events to validate code quality, security, and functionality

name: CI Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ttrpg/app
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '18'

jobs:
  # Job 1: Code Quality and Security Analysis
  code-quality:
    name: Code Quality & Security
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Full history for better analysis
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-dev.txt
    
    - name: Lint with flake8
      run: |
        # Stop the build if there are Python syntax errors or undefined names
        flake8 src_common --count --select=E9,F63,F7,F82 --show-source --statistics
        # Exit-zero treats all errors as warnings
        flake8 src_common --count --exit-zero --max-complexity=10 --max-line-length=120 --statistics
    
    - name: Format check with black
      run: |
        black --check --diff src_common/
    
    - name: Import order check with isort
      run: |
        isort --check-only --diff src_common/
    
    - name: Type checking with mypy
      run: |
        mypy src_common/ --ignore-missing-imports
      continue-on-error: true  # Type checking is advisory for now
    
    - name: Security scan with Bandit
      run: |
        bandit -r src_common/ -f json -o bandit-report.json
        bandit -r src_common/ --severity-level medium
    
    - name: Upload Bandit results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: bandit-security-report
        path: bandit-report.json
    
    - name: Dependency vulnerability scan
      run: |
        pip install safety
        safety check --json --output safety-report.json
        safety check
      continue-on-error: true  # Advisory for now
    
    - name: Upload safety results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: safety-vulnerability-report
        path: safety-report.json

  # Job 2: Unit Tests
  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        python-version: ['3.11', '3.12']
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-dev.txt
    
    - name: Run unit tests with pytest
      run: |
        pytest tests/unit/ \
          --cov=src_common \
          --cov-report=xml \
          --cov-report=html \
          --junitxml=junit-results.xml \
          --verbose
    
    - name: Upload test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: unit-test-results-py${{ matrix.python-version }}
        path: |
          junit-results.xml
          htmlcov/
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      if: matrix.python-version == '3.11'
      with:
        file: coverage.xml
        flags: unittests
        name: codecov-umbrella

  # Job 3: Functional Tests
  functional-tests:
    name: Functional Tests
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_DB: ttrpg_test
          POSTGRES_USER: ttrpg
          POSTGRES_PASSWORD: test_password
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      mongo:
        image: mongo:7
        env:
          MONGO_INITDB_ROOT_USERNAME: ttrpg
          MONGO_INITDB_ROOT_PASSWORD: test_password
        options: >-
          --health-cmd "mongosh --eval 'db.runCommand({ping: 1})'"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 27017:27017
      
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-dev.txt
    
    - name: Wait for services
      run: |
        sleep 10  # Additional wait for service stability
    
    - name: Run functional tests
      env:
        POSTGRES_HOST: localhost
        POSTGRES_PORT: 5432
        POSTGRES_DB: ttrpg_test
        POSTGRES_USER: ttrpg
        POSTGRES_PASSWORD: test_password
        MONGO_URI: mongodb://ttrpg:test_password@localhost:27017/ttrpg_test
        REDIS_URL: redis://localhost:6379
        ENVIRONMENT: test
      run: |
        pytest tests/functional/ \
          --junitxml=functional-results.xml \
          --verbose
    
    - name: Upload functional test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: functional-test-results
        path: functional-results.xml

  # Job 4: Container Build and Test
  container-build:
    name: Container Build & Test
    runs-on: ubuntu-latest
    needs: [code-quality, unit-tests]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Log in to Container Registry
      if: github.event_name != 'pull_request'
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
    
    - name: Get version info
      id: version
      run: |
        if [ -f VERSION ]; then
          VERSION=$(cat VERSION)
        else
          VERSION="0.1.0"
        fi
        GIT_SHA=$(git rev-parse --short=8 HEAD)
        TIMESTAMP=$(date -u +"%Y%m%dT%H%M%SZ")
        BUILD_VERSION="${VERSION}+${GIT_SHA}-${TIMESTAMP}"
        
        echo "version=${VERSION}" >> $GITHUB_OUTPUT
        echo "build_version=${BUILD_VERSION}" >> $GITHUB_OUTPUT
        echo "git_sha=${GIT_SHA}" >> $GITHUB_OUTPUT
        echo "timestamp=${TIMESTAMP}" >> $GITHUB_OUTPUT
    
    - name: Build container image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: services/app/Dockerfile
        push: false
        load: true
        tags: |
          test-image:latest
          ${{ steps.meta.outputs.tags }}
        labels: |
          ${{ steps.meta.outputs.labels }}
          org.opencontainers.image.version=${{ steps.version.outputs.version }}
          org.opencontainers.image.revision=${{ steps.version.outputs.git_sha }}
        build-args: |
          VERSION=${{ steps.version.outputs.build_version }}
          GIT_SHA=${{ steps.version.outputs.git_sha }}
          BUILD_TIMESTAMP=${{ steps.version.outputs.timestamp }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
    
    - name: Test container startup
      run: |
        # Start container in background
        docker run -d --name test-container \
          -p 8000:8000 \
          -e ENVIRONMENT=test \
          -e LOG_LEVEL=INFO \
          test-image:latest
        
        # Wait for startup
        sleep 30
        
        # Check if container is running
        if ! docker ps | grep test-container; then
          echo "Container failed to start"
          docker logs test-container
          exit 1
        fi
        
        # Basic health check
        if ! curl -f http://localhost:8000/healthz; then
          echo "Health check failed"
          docker logs test-container
          exit 1
        fi
        
        echo "Container test passed"
        docker stop test-container
    
    - name: Run container security scan
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: 'test-image:latest'
        format: 'sarif'
        output: 'trivy-results.sarif'
    
    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'
    
    - name: Push image (main/develop only)
      if: github.event_name != 'pull_request' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')
      uses: docker/build-push-action@v5
      with:
        context: .
        file: services/app/Dockerfile
        push: true
        tags: |
          ${{ steps.meta.outputs.tags }}
          ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.version.outputs.git_sha }}
        labels: |
          ${{ steps.meta.outputs.labels }}
          org.opencontainers.image.version=${{ steps.version.outputs.version }}
          org.opencontainers.image.revision=${{ steps.version.outputs.git_sha }}
        build-args: |
          VERSION=${{ steps.version.outputs.build_version }}
          GIT_SHA=${{ steps.version.outputs.git_sha }}
          BUILD_TIMESTAMP=${{ steps.version.outputs.timestamp }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # Job 5: Security Assessment Summary
  security-summary:
    name: Security Assessment
    runs-on: ubuntu-latest
    needs: [code-quality, container-build]
    if: always()
    
    steps:
    - name: Download security artifacts
      uses: actions/download-artifact@v3
      with:
        path: security-reports
    
    - name: Security summary
      run: |
        echo "## Security Assessment Summary" >> $GITHUB_STEP_SUMMARY
        echo "| Tool | Status | Report |" >> $GITHUB_STEP_SUMMARY
        echo "|------|--------|--------|" >> $GITHUB_STEP_SUMMARY
        
        if [ -f "security-reports/bandit-security-report/bandit-report.json" ]; then
          echo "| Bandit | ✅ Completed | [Download](bandit-report.json) |" >> $GITHUB_STEP_SUMMARY
        else
          echo "| Bandit | ❌ Failed | - |" >> $GITHUB_STEP_SUMMARY
        fi
        
        if [ -f "security-reports/safety-vulnerability-report/safety-report.json" ]; then
          echo "| Safety | ✅ Completed | [Download](safety-report.json) |" >> $GITHUB_STEP_SUMMARY
        else
          echo "| Safety | ❌ Failed | - |" >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "| Trivy | ✅ Completed | [View SARIF](trivy-results.sarif) |" >> $GITHUB_STEP_SUMMARY

  # Job 6: Build Status Summary
  build-status:
    name: Build Status
    runs-on: ubuntu-latest
    needs: [code-quality, unit-tests, functional-tests, container-build]
    if: always()
    
    steps:
    - name: Determine overall status
      run: |
        if [[ "${{ needs.code-quality.result }}" == "success" && \
              "${{ needs.unit-tests.result }}" == "success" && \
              "${{ needs.functional-tests.result }}" == "success" && \
              "${{ needs.container-build.result }}" == "success" ]]; then
          echo "BUILD_STATUS=success" >> $GITHUB_ENV
          echo "🎉 All CI checks passed!" >> $GITHUB_STEP_SUMMARY
        else
          echo "BUILD_STATUS=failure" >> $GITHUB_ENV
          echo "❌ One or more CI checks failed" >> $GITHUB_STEP_SUMMARY
          echo "- Code Quality: ${{ needs.code-quality.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- Unit Tests: ${{ needs.unit-tests.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- Functional Tests: ${{ needs.functional-tests.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- Container Build: ${{ needs.container-build.result }}" >> $GITHUB_STEP_SUMMARY
        fi
    
    - name: Update commit status
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v6
      with:
        script: |
          const { BUILD_STATUS } = process.env;
          const state = BUILD_STATUS === 'success' ? 'success' : 'failure';
          const description = BUILD_STATUS === 'success' 
            ? 'All CI checks passed' 
            : 'One or more CI checks failed';
          
          await github.rest.repos.createCommitStatus({
            owner: context.repo.owner,
            repo: context.repo.repo,
            sha: context.payload.pull_request.head.sha,
            state: state,
            description: description,
            context: 'CI Pipeline'
          });