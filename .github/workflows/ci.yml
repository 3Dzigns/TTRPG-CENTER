# .github/workflows/ci.yml
name: CI

on:
  push:
    branches: ["**"]
  pull_request:
    branches: [main]

permissions:
  contents: read
  checks: write
  pull-requests: write

jobs:
  test:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        python-version: ['3.10', '3.11', '3.12']
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
      
      - name: Cache pip dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          # Install base requirements if they exist
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          # Install test dependencies
          pip install pytest pytest-cov pytest-asyncio httpx bandit
          pip install fastapi uvicorn python-multipart
          pip install python-json-logger
      
      - name: Initialize test environment
        run: |
          # Create environment structure
          ./scripts/init-environments.sh test
          
          # Set up test environment variables
          echo "APP_ENV=test" >> $GITHUB_ENV
          echo "PORT=8181" >> $GITHUB_ENV
          echo "LOG_LEVEL=ERROR" >> $GITHUB_ENV
          echo "CACHE_TTL_SECONDS=5" >> $GITHUB_ENV
      
      - name: Run unit tests
        run: |
          pytest tests/unit -v --tb=short --cov=src_common --cov-report=xml --cov-report=term-missing
        env:
          APP_ENV: test
          PORT: 8181
          LOG_LEVEL: ERROR
      
      - name: Run functional tests
        run: |
          pytest tests/functional -v --tb=short
        env:
          APP_ENV: test
          PORT: 8181
          LOG_LEVEL: ERROR
      
      - name: Run security tests (Bandit)
        run: |
          bandit -r src_common -f json -o bandit-report.json || true
          bandit -r src_common --severity-level medium --confidence-level medium
      
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          fail_ci_if_error: false
          verbose: true
      
      - name: Archive test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: test-results-${{ matrix.python-version }}
          path: |
            pytest-report.xml
            coverage.xml
            bandit-report.json

  security:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Python 3.12
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
      
      - name: Install security testing tools
        run: |
          python -m pip install --upgrade pip
          pip install bandit safety semgrep
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          pip install pytest pytest-asyncio httpx
          pip install fastapi uvicorn python-json-logger
      
      - name: Run Bandit security linter
        run: |
          bandit -r src_common -ll -f json -o bandit-results.json
          bandit -r src_common -ll
      
      - name: Run Safety check for dependencies
        run: |
          safety check --json --output safety-results.json || true
          safety check
      
      - name: Run security-specific tests
        run: |
          pytest tests/security -v --tb=short
        env:
          APP_ENV: test
          LOG_LEVEL: ERROR
      
      - name: Check for secrets in code
        run: |
          # Simple check for potential secrets in code
          echo "Checking for potential secrets..."
          ! grep -r -i "password\s*=" src_common/ || (echo "Found hardcoded passwords!" && exit 1)
          ! grep -r -i "secret\s*=" src_common/ || (echo "Found hardcoded secrets!" && exit 1)
          ! grep -r -i "api_key\s*=" src_common/ || (echo "Found hardcoded API keys!" && exit 1)
          ! grep -r -E "(sk-|pk-)[a-zA-Z0-9]{20,}" src_common/ || (echo "Found API key patterns!" && exit 1)
          echo "No obvious secrets found in code."
      
      - name: Upload security results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: security-results
          path: |
            bandit-results.json
            safety-results.json

  lint:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Python 3.12
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
      
      - name: Install linting tools
        run: |
          python -m pip install --upgrade pip
          pip install black isort flake8 mypy
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          pip install fastapi uvicorn python-json-logger
      
      - name: Check code formatting with Black
        run: |
          black --check --diff src_common/ tests/
      
      - name: Check imports with isort
        run: |
          isort --check-only --diff src_common/ tests/
      
      - name: Lint with flake8
        run: |
          flake8 src_common/ tests/ --max-line-length=120 --ignore=E203,W503
      
      - name: Type checking with mypy
        run: |
          mypy src_common/ --ignore-missing-imports --no-strict-optional
        continue-on-error: true  # Type checking is advisory for now

  integration:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Python 3.12
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          pip install pytest pytest-asyncio httpx
          pip install fastapi uvicorn python-json-logger
      
      - name: Initialize all environments
        run: |
          # Test environment initialization scripts
          ./scripts/init-environments.sh dev
          ./scripts/init-environments.sh test  
          ./scripts/init-environments.sh prod
          
          # Verify environment isolation
          ls -la env/
          for env in dev test prod; do
            echo "=== Environment: $env ==="
            ls -la env/$env/
            cat env/$env/config/ports.json
            echo ""
          done
      
      - name: Test environment isolation
        run: |
          pytest tests/unit/test_arch001_env_dirs.py -v --tb=short
          pytest tests/functional/test_isolation.py -v --tb=short
        env:
          APP_ENV: test
      
      - name: Test application startup
        run: |
          # Test that the application can start in each environment
          export APP_ENV=test
          export PORT=8181
          
          # Start application in background
          python -m uvicorn src_common.app:app --host 127.0.0.1 --port 8181 &
          APP_PID=$!
          
          # Wait for startup
          sleep 5
          
          # Test health endpoint
          curl -f http://127.0.0.1:8181/healthz | jq .
          
          # Test status endpoint
          curl -f http://127.0.0.1:8181/status | jq .
          
          # Stop application
          kill $APP_PID || true
      
      - name: Run mock ingestion test
        run: |
          python -c "
          import asyncio
          from src_common.mock_ingest import run_mock_job
          
          async def test_mock():
              result = await run_mock_job('ci-test-001')
              print(f'Mock job result: {result}')
              assert result['status'] == 'completed'
              assert result['phases_completed'] == 3
              print('âœ… Mock ingestion test passed')
          
          asyncio.run(test_mock())
          "
        env:
          APP_ENV: test

  preflight:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Python 3.12
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          pip install pytest fastapi uvicorn python-json-logger
      
      - name: Run preflight validation
        run: |
          # Create preflight script if it doesn't exist
          if [ ! -f scripts/preflight.sh ]; then
            echo "Creating temporary preflight script..."
            cat > scripts/preflight.sh << 'EOF'
          #!/bin/bash
          set -e
          echo "ðŸš€ Running Phase 0 preflight validation..."
          
          # Initialize dev environment
          ./scripts/init-environments.sh dev
          
          # Run unit tests
          echo "Running unit tests..."
          python -m pytest tests/unit -q
          
          # Run functional tests  
          echo "Running functional tests..."
          python -m pytest tests/functional -q
          
          echo "âœ… Preflight validation passed!"
          EOF
            chmod +x scripts/preflight.sh
          fi
          
          # Run preflight
          ./scripts/preflight.sh
        env:
          APP_ENV: dev